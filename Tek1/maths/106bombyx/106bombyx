#!/usr/bin/env python3
##
## EPITECH PROJECT, 2024
## 106bombyx
## File description:
## 106bombyx
##

import sys

#__________PRINTS____________________________________________________________

def usage():
    print("USAGE")
    print("    ./106bombyx n [k | i0 i1]")
    print("\nDESCRIPTION")
    print("    n      number of first generation individuals")
    print("    k      growth rate from 1 to 4")
    print("    i0     initial generation (included)")
    print("    i1     final generation (included)")
    sys.exit(0)

def print_population(n, k, i0, i1):
    populations = calculate_population(n, k, i0, i1)
    for generation, population in enumerate(populations, start=i0):
        print(f"{generation} {population:.2f}")

def print_range(populations, k):
    for population in populations:
        print(f"{k/100.0:.2f} {population:.2f}")

#__________CALCULATE_________________________________________________________

def calculate_population(n, k, i0, i1):
    populations = [n]
    for i in range(1, i1 + 1):
        x_i = populations[-1]
        x_next = k * x_i * (1 - x_i / 1000)
        populations.append(x_next)
    return populations[i0-1:i1]

def calculate_for_range(n, i0, i1):
    for k in range(100, 401, 1):
        populations = calculate_population(n, k/100.0, i0, i1)
        print_range(populations, k)

#__________MAIN______________________________________________________________


def error():
    if len(sys.argv) == 2 and sys.argv[1] != "-h":
        print("Wrong flag", file=sys.stderr)
    elif len(sys.argv) < 2:
        print("Too few arguments", file=sys.stderr)
    elif len(sys.argv) > 4:
        print("Too much arguments", file=sys.stderr)
    print("Try making: ./106bombyx -h", file=sys.stderr)
    sys.exit(84)

#_____PARSING________________________________________________________________

def parse_3args():
    try:
        int(sys.argv[1])
        int(sys.argv[2])
        int(sys.argv[3])
    except ValueError:
        print("Wrong values", file=sys.stderr)
        print("Try making: ./106bombyx -h", file=sys.stderr)
        sys.exit(84)
    return int(sys.argv[1]), int(sys.argv[2]), int(sys.argv[3])

def parse_2args():
    try:
        int(sys.argv[1])
        float(sys.argv[2])
    except ValueError:
        print(f"Wrong values", file=sys.stderr)
        print("Try making: ./106bombyx -h", file=sys.stderr)
        sys.exit(84)
    return int(sys.argv[1]), float(sys.argv[2])

#_____MAIN___________________________________________________________________

def main():
    if len(sys.argv) == 2 and sys.argv[1] == "-h":
        usage()

    elif len(sys.argv) == 3:
        n, k = parse_2args()
        print_population(n, k, 1, 100)

    elif len(sys.argv) == 4:
        n, i0, i1 = parse_3args()
        calculate_for_range(n, i0, i1)

    else:
        error()

#____________________________________________________________________________

if __name__ == '__main__':
    main()
